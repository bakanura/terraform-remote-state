name: 'Terraform Azure Deployment'

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Azure Login using Service Principal credentials
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    # Setup Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize Terraform (configure providers, etc.)
    - name: Terraform Init
      run: terraform init -reconfigure

    # Terraform Format (check if formatting is correct)
    - name: Terraform Format
      run: terraform fmt -check

    # Terraform Plan & Apply (only on push to master)
    - name: Terraform Plan and Apply (Push to master)
      if: github.event_name == 'push'
      run: |
        terraform plan -input=false -no-color \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        
        terraform apply -auto-approve -input=false \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    # Initialize Backend (Move state to new backend, if needed, only after apply)
    - name: Initialize Backend (Move state to new backend)
      if: github.event_name == 'push'
      run: |
        echo "Running init-backend.sh to initialize backend and move state to new remote storage."
        chmod +x ./init-backend.sh
        ./init-backend.sh

  # Manual Terraform Destroy Step (Can only be triggered manually)
  terraform_destroy:
    name: 'Manual Terraform Destroy'
    runs-on: ubuntu-latest
    needs: terraform
    environment: production
    if: ${{ success() && github.event_name == 'push' }}  # Ensures this only runs after successful apply
    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Azure Login using Service Principal credentials
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    # Setup Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Manual approval to destroy resources
    - name: Manual approval before destroy
      if: ${{ github.event_name == 'push' }}  # Ensures manual approval is required
      run: |
        echo "Waiting for manual approval to destroy resources."
      timeout-minutes: 30  # Wait up to 30 minutes for manual approval
      continue-on-error: false

    # Terraform Destroy Step (Triggered after manual approval)
    - name: Terraform Destroy
      if: ${{ github.event_name == 'push' }}  # Triggered after manual approval
      run: |
        terraform destroy -auto-approve -input=false \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
