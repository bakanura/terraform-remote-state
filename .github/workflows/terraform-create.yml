name: 'Terraform Azure Deployment'

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:  # Allows manual triggering of the workflow
    inputs:
      destroy:
        description: 'Trigger destruction of resources'
        required: false
        default: 'false'

permissions:
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Azure Login using Service Principal credentials
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    # Setup Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init -reconfigure

    # Terraform Format (Make sure this doesn't stop the workflow on error)
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true  # Allow the workflow to continue if formatting issues are found

    # Allow manual triggering of the destroy step through workflow_dispatch input
    - name: Set Destroy from Input
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [[ "${{ github.event.inputs.destroy }}" == "true" ]]; then
          echo "Manual destroy trigger detected."
          echo "destroy=true" >> $GITHUB_ENV
        else
          echo "Manual destroy trigger not detected."
          echo "destroy=false" >> $GITHUB_ENV
        fi

    # Terraform Plan (Runs only on push to master)
    - name: Terraform Plan
      if: github.event_name == 'push' && env.destroy == 'false'
      run: |
        terraform plan -input=false -no-color \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    # Terraform Apply (Runs only on push to master unless destroy is triggered)
    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/master' && env.destroy == 'false'
      run: |
        terraform apply -auto-approve -input=false \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    # Terraform Destroy (Runs only if manually triggered or destroy flag is set)
    - name: Terraform Destroy
      if: github.event_name == 'push' && env.destroy == 'true'
      run: |
        terraform destroy -auto-approve -input=false \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    # Initialize Backend (Move state to new backend)
    - name: Initialize Backend (Move state to new backend)
      if: github.event_name == 'push' && env.destroy == 'false'
      run: |
        echo "Running init-backend.sh to initialize backend and move state to new remote storage."
        chmod +x ./init-backend.sh
        ./init-backend.sh

    # Manual approval step before destroy
    - name: Manual approval before destroy
      if: github.event_name == 'workflow_dispatch' && env.destroy == 'true'
      run: |
        echo "Waiting for manual approval to destroy resources."
      timeout-minutes: 30  # Wait up to 30 minutes for manual approval
      continue-on-error: false
