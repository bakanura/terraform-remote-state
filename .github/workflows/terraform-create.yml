name: 'Terraform Azure Deployment'

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:  # Allows manual triggering of the workflow

permissions:
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Azure Login
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init

    # Terraform Format
    - name: Terraform Format
      run: terraform fmt -check

    # Check if specific lines in remote-storage.tf change from true to false
    - name: Check Changes in remote-storage.tf
      id: check_changes
      run: |
        # Fetch the previous commit to compare (only if it exists)
        git fetch origin master
        
        # Check if there are enough commits to compare (e.g., HEAD~1 exists)
        if git rev-parse --verify HEAD~1 > /dev/null 2>&1; then
          # Get the specific lines (21 and 33) from both the current and previous commits
          CURRENT_LINE_21=$(git show HEAD:remote-storage.tf | sed -n '21p')
          CURRENT_LINE_33=$(git show HEAD:remote-storage.tf | sed -n '33p')
          PREVIOUS_LINE_21=$(git show HEAD~1:remote-storage.tf | sed -n '21p')
          PREVIOUS_LINE_33=$(git show HEAD~1:remote-storage.tf | sed -n '33p')
          
          # Compare and check if the values changed from true to false
          if [[ "$CURRENT_LINE_21" == *"true"* && "$PREVIOUS_LINE_21" == *"false"* ]] || \
             [[ "$CURRENT_LINE_33" == *"true"* && "$PREVIOUS_LINE_33" == *"false"* ]]; then
            echo "Changes detected in remote-storage.tf. Triggering destroy."
            echo "destroy=true" >> $GITHUB_ENV
          else
            echo "No changes detected that require destroy."
            echo "destroy=false" >> $GITHUB_ENV
          fi
        else
          # If there is no previous commit, skip comparison and assume no destroy
          echo "No previous commit found. Skipping destroy check."
          echo "destroy=false" >> $GITHUB_ENV

    # Terraform Plan (Runs only on push to master)
    - name: Terraform Plan
      if: github.event_name == 'push'
      run: terraform plan -input=false -no-color

    # Terraform Apply (Runs only on push to master)
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && env.destroy == 'false'
      run: terraform apply -auto-approve -input=false

    # Terraform Destroy (Runs only if specific changes in remote-storage.tf are detected)
    - name: Terraform Destroy
      if: github.event_name == 'push' && env.destroy == 'true'
      run: terraform destroy -auto-approve -input=false
