name: 'Terraform Azure Deployment'

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:  # Allows manual triggering of the workflow with an input parameter

permissions:
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Azure Login
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Setup Terraform Backend (if necessary)
    - name: Setup Terraform Backend
      run: |
        # Example of configuring the backend with Azure Blob Storage for remote state
        cat <<EOF > backend.tf
        terraform {
          backend "azurerm" {
            resource_group_name   = "yourResourceGroup"
            storage_account_name  = "yourStorageAccount"
            container_name        = "yourContainer"
            key                   = "terraform.tfstate"
          }
        }
        EOF
        echo "Backend configuration written to backend.tf."

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init

    # Terraform Format (ensure that formatting is correct)
    - name: Terraform Format
      run: terraform fmt -check

    # Check if specific lines in remote-storage.tf change from true to false
    - name: Check Changes in remote-storage.tf
      id: check_changes
      run: |
        # Fetch the previous commit to compare (only if it exists)
        git fetch origin master
        
        # Check if there are enough commits to compare (e.g., HEAD~1 exists)
        if git rev-parse --verify HEAD~1 > /dev/null 2>&1; then
          # Get the specific lines (21 and 33) from both the current and previous commits
          CURRENT_LINE_21=$(git show HEAD:remote-storage.tf | sed -n '21p')
          CURRENT_LINE_33=$(git show HEAD:remote-storage.tf | sed -n '33p')
          PREVIOUS_LINE_21=$(git show HEAD~1:remote-storage.tf | sed -n '21p')
          PREVIOUS_LINE_33=$(git show HEAD~1:remote-storage.tf | sed -n '33p')
          
          # Debugging output (to verify correct lines are being fetched)
          echo "Current Line 21: $CURRENT_LINE_21"
          echo "Previous Line 21: $PREVIOUS_LINE_21"
          echo "Current Line 33: $CURRENT_LINE_33"
          echo "Previous Line 33: $PREVIOUS_LINE_33"
          
          # Compare and check if the values changed from true to false
          if [[ "$CURRENT_LINE_21" == *"true"* && "$PREVIOUS_LINE_21" == *"false"* ]] || \
             [[ "$CURRENT_LINE_33" == *"true"* && "$PREVIOUS_LINE_33" == *"false"* ]]; then
            echo "Changes detected in remote-storage.tf. Triggering destroy."
            echo "destroy=true" >> $GITHUB_ENV
          else
            echo "No changes detected that require destroy."
            echo "destroy=false" >> $GITHUB_ENV
          fi
        else
          # If there is no previous commit, skip comparison and assume no destroy
          echo "No previous commit found. Skipping destroy check."
          echo "destroy=false" >> $GITHUB_ENV
        fi  # <-- Closing the 'if' block properly

    # Allow manual triggering of the destroy step through workflow_dispatch input
    - name: Set Destroy from Input
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [[ "${{ github.event.inputs.destroy }}" == "true" ]]; then
          echo "Manual destroy trigger detected."
          echo "destroy=true" >> $GITHUB_ENV
        else
          echo "Manual destroy trigger not detected."
          echo "destroy=false" >> $GITHUB_ENV
        fi

    # Terraform Plan (Runs only on push to master)
    - name: Terraform Plan
      if: github.event_name == 'push'
      run: terraform plan -input=false -no-color

    # Terraform Apply (Runs only on push to master)
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && env.destroy == 'false'
      run: terraform apply -auto-approve -input=false

    # Terraform Destroy (Runs only if specific changes in remote-storage.tf are detected or manually triggered)
    - name: Terraform Destroy
      if: github.event_name == 'push' && env.destroy == 'true'
      run: terraform destroy -auto-approve -input=false

    # Capture Terraform Outputs (if needed)
    - name: Capture Terraform Outputs
      if: github.event_name == 'push' && env.destroy == 'false'
      run: |
        terraform output -json > terraform_outputs.json
        echo "Terraform outputs captured."
        
        # Example: Set the output variables as GitHub environment variables if needed
        export BUCKET_NAME=$(terraform output -raw bucket_name)
        export STORAGE_ACCOUNT_ID=$(terraform output -raw storage_account_id)
        
        echo "BUCKET_NAME=${BUCKET_NAME}" >> $GITHUB_ENV
        echo "STORAGE_ACCOUNT_ID=${STORAGE_ACCOUNT_ID}" >> $GITHUB_ENV

    # Optionally: Upload Terraform outputs as an artifact
    - name: Upload Terraform Outputs as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs
        path: terraform_outputs.json
