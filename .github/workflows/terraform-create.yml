name: 'Terraform Azure Deployment'

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:  # Allows manual triggering of the workflow

permissions:
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Azure Login using Service Principal credentials
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    # Setup Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init -reconfigure

    # Terraform Format
    - name: Terraform Format
      run: terraform fmt -check

    # Check for changes in remote-storage.tf
    - name: Check Changes in remote-storage.tf
      id: check_changes
      run: |
        git fetch origin master
        
        if git rev-parse --verify HEAD~1 > /dev/null 2>&1; then
          CURRENT_LINE_21=$(git show HEAD:remote-storage.tf | sed -n '21p')
          CURRENT_LINE_33=$(git show HEAD:remote-storage.tf | sed -n '33p')
          PREVIOUS_LINE_21=$(git show HEAD~1:remote-storage.tf | sed -n '21p')
          PREVIOUS_LINE_33=$(git show HEAD~1:remote-storage.tf | sed -n '33p')
          
          # Debugging output
          echo "Current Line 21: $CURRENT_LINE_21"
          echo "Previous Line 21: $PREVIOUS_LINE_21"
          echo "Current Line 33: $CURRENT_LINE_33"
          echo "Previous Line 33: $PREVIOUS_LINE_33"
          
          # Compare and check if the values changed from true to false
          if [[ "$CURRENT_LINE_21" == *"true"* && "$PREVIOUS_LINE_21" == *"false"* ]] || \
             [[ "$CURRENT_LINE_33" == *"true"* && "$PREVIOUS_LINE_33" == *"false"* ]]; then
            echo "Changes detected in remote-storage.tf. Triggering destroy."
            echo "destroy=true" >> $GITHUB_ENV
          else
            echo "No changes detected that require destroy."
            echo "destroy=false" >> $GITHUB_ENV
          fi
        else
          echo "No previous commit found. Skipping destroy check."
          echo "destroy=false" >> $GITHUB_ENV
        fi

    # Allow manual triggering of the destroy step through workflow_dispatch input
    - name: Set Destroy from Input
      if: github.event_name == 'workflow_dispatch'
      run: |
        if [[ "${{ github.event.inputs.destroy }}" == "true" ]]; then
          echo "Manual destroy trigger detected."
          echo "destroy=true" >> $GITHUB_ENV
        else
          echo "Manual destroy trigger not detected."
          echo "destroy=false" >> $GITHUB_ENV
        fi

    # Terraform Plan (Runs only on push to master)
    - name: Terraform Plan
      if: github.event_name == 'push' && env.destroy == 'false'
      run: |
        terraform plan -input=false -no-color \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    # Terraform Apply (Runs only on push to master unless destroy is triggered)
    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/master' && env.destroy == 'false'
      run: |
        terraform apply -auto-approve -input=false \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    # Terraform Destroy (Runs only if specific changes in remote-storage.tf are detected or manually triggered)
    - name: Terraform Destroy
      if: github.event_name == 'push' && env.destroy == 'true'
      run: |
        terraform destroy -auto-approve -input=false \
          -var="ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -var="ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" \
          -var="ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

    # Initialize Backend (Move state to new backend)
    - name: Initialize Backend (Move state to new backend)
      if: github.event_name == 'push' && env.destroy == 'false'
      run: |
        echo "Running init-backend.sh to initialize backend and move state to new remote storage."
        chmod +x ./init-backend.sh
        ./init-backend.sh
